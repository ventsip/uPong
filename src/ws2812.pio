.pio_version 0 // only requires PIO version 0

.program ws2812_single
.define public T1 8
.define public T2 8
.define public T3 9

.fifo tx
.out 1 left auto 32

.wrap_target
next_word:
    set y, 23
send_bit:
    out x, 1 
    mov pins, !null [T1-1]
    mov pins, x     [T2-1]
    mov pins, null  [T3-6]
    jmp y-- next_bit
    out x, 8
    jmp next_word
next_bit:
    jmp send_bit [2]
.wrap

.program ws2812_parallel
.define public T1 3
.define public T2 3
.define public T3 4

.fifo tx
.out 8 right auto 8

.wrap_target
    out x, 8    // shift out 8 bits of data
    mov pins, !null [T1-1]
    mov pins, x     [T2-1]
    mov pins, null  [T3-2]
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void ws2812_single_program_init(PIO pio, uint sm, uint offset, uint pin_base, float freq) {

    pio_gpio_init(pio, pin_base);

    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, 1, true);

    pio_sm_config c = ws2812_single_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin_base, 1);

    int cycles_per_bit = ws2812_single_T1 + ws2812_single_T2 + ws2812_single_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, false);
}

static inline void ws2812_parallel_program_init(PIO pio, uint sm, uint offset, uint pin_base, uint pin_count, float freq) {
    for(uint i=pin_base; i<pin_base+pin_count; i++) {
        pio_gpio_init(pio, i);
    }
    pio_sm_set_consecutive_pindirs(pio, sm, pin_base, pin_count, true);

    pio_sm_config c = ws2812_parallel_program_get_default_config(offset);
    sm_config_set_out_pins(&c, pin_base, pin_count);

    int cycles_per_bit = ws2812_parallel_T1 + ws2812_parallel_T2 + ws2812_parallel_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
